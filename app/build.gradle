/*
 * Copyright (c) This code was written by iClaude. All rights reserved.
 */



// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")
// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()
// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    compileSdkVersion 25
    buildToolsVersion "25.0.1"
    compileOptions.encoding = 'windows-1251'
    defaultConfig {
        applicationId "com.flingsoftware.personalbudget"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 14
        versionName "1.6"
    }
    defaultConfig {
        renderscriptTargetApi 19
        renderscriptSupportModeEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.release
        }
        debug {

        }
    }
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }
    productFlavors {
    }

    // Added to solve compile error: Cannot merge new index xxxxx into a non-jumbo instruction!
    dexOptions {
        jumboMode true
    }

    /* Added to solve problems with lint when executing task "build"
    lintOptions {
        abortOnError false
    }*/

    // Timeout for installing the app on the device
    adbOptions {
        timeOutInMs = 30 * 1000
    }
}

ext {
    libraryVersion = '25.0.1'
}

dependencies {
    compile("com.android.support:cardview-v7:$libraryVersion")
    compile("com.android.support:recyclerview-v7:$libraryVersion")
    compile("com.android.support:design:$libraryVersion")
    compile "com.android.support:palette-v7:$libraryVersion"
    compile 'com.android.support.constraint:constraint-layout:1.0.0-beta4'

    compile fileTree(include: ['*.jar'], dir: 'libs')
}

// Copy apks in the apks folder at every build
task copyApks(type: Copy, dependsOn: assemble) {
    from("$buildDir/outputs/apk") {
        exclude '**/*unsigned.apk', '**/*unaligned.apk'
    }
    into '../apks'
}

// Delete apks folder
task cleanApksFolder(type: Delete) {
    delete "$rootProject.projectDir/apks/"
}

// Cleans the project and deletes apks folder: you can just run clean
task cleanProjectAndApksFolder(type: Delete, dependsOn: clean) {
    delete "$rootProject.projectDir/apks/"
}

build.dependsOn copyApks
clean.dependsOn cleanApksFolder

gradle.taskGraph.whenReady { graph ->
    if (project.hasProperty('noLint')) {
        graph.allTasks.findAll { it.name ==~ /lint.*/ }*.enabled = false
    }
}
